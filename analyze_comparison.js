#!/usr/bin/env node
/**
 * Comprehensive comparison of Excel table with database
 */

const fs = require('fs');

// Full table data from user (23 rows provided)
const TABLE_DATA = `15.03.2025	–í–µ—Ä–æ–Ω–∏–∫–∞	3
18.03.2025	–ê—Ä—Å–µ–Ω	15
22.03.2025	–ù–∞—Ç–∞–ª–∏—è	4
23.03.2025	–ê—Ä—Å–µ–Ω	5
26.03.2025	–í–ª–∞–¥	10
26.03.2025	–ó–ª–∞—Ç–∞	9
28.03.2025	–ú–∞—Ä–∏–Ω–∞	7
28.03.2025	–î–º–∏—Ç—Ä–∏–π	5
29.03.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	19
31.03.2025	–í–ª–∞–¥	17
31.03.2025	–ó–ª–∞—Ç–∞	26
31.03.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	16
31.03.2025	–î–∏–º–∞	2
02.04.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	4
03.04.2025	–ó–ª–∞—Ç–∞	2
03.04.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	5
04.04.2025	–í–ª–∞–¥–∏–º–∏—Ä	2
04.04.2025	–ï–≤–≥–µ–Ω–∏—è	5
05.04.2025	–ñ–∞—Ä–∫—ã–Ω–∞–π	5
07.04.2025	–¢–∏—Ö–æ–Ω	9
07.04.2025	–ê—Ä—Ç—ë–º	1
07.04.2025	–î–º–∏—Ç—Ä–∏–π	1
07.04.2025	–ú–∞—Ä–∏–Ω–∞	6`;

async function analyzeComparison() {
  try {
    // Fetch database records
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const response = await fetch('https://functions.poehali.dev/21cf6c5f-30ec-4a13-bbbe-369db6a0b051');
    const result = await response.json();
    
    if (!result.success) {
      throw new Error('Failed to fetch database records');
    }
    
    const dbRecords = result.records;
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${dbRecords.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î`);
    
    // Parse table data
    const tableRecords = [];
    for (const line of TABLE_DATA.trim().split('\n')) {
      const parts = line.split('\t');
      if (parts.length === 3) {
        const [dateStr, promoter, count] = parts;
        const [day, month, year] = dateStr.split('.');
        const isoDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
        tableRecords.push({
          date: isoDate,
          promoter_name: promoter.trim(),
          contact_count: parseInt(count.trim())
        });
      }
    }
    console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tableRecords.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã\n`);
    
    // Create indexed maps (key = date|promoter_name)
    const tableMap = new Map();
    const dbMap = new Map();
    
    // Index table records
    for (const rec of tableRecords) {
      const key = `${rec.date}|${rec.promoter_name}`;
      if (!tableMap.has(key)) {
        tableMap.set(key, []);
      }
      tableMap.get(key).push(rec);
    }
    
    // Index DB records
    for (const rec of dbRecords) {
      const key = `${rec.date}|${rec.promoter_name}`;
      if (!dbMap.has(key)) {
        dbMap.set(key, []);
      }
      dbMap.get(key).push(rec);
    }
    
    // Perform analysis
    const missing = [];
    const mismatches = [];
    const perfectMatches = [];
    
    // Check each table record
    for (const [key, tableRecs] of tableMap.entries()) {
      const [date, promoter] = key.split('|');
      const tableTotal = tableRecs.reduce((sum, r) => sum + r.contact_count, 0);
      
      if (!dbMap.has(key)) {
        // Record missing in DB
        missing.push({
          date,
          promoter_name: promoter,
          table_count: tableTotal
        });
      } else {
        // Record exists, check if counts match
        const dbRecs = dbMap.get(key);
        const dbTotal = dbRecs.reduce((sum, r) => sum + r.contact_count, 0);
        
        if (tableTotal === dbTotal) {
          perfectMatches.push({
            date,
            promoter_name: promoter,
            count: tableTotal
          });
        } else {
          mismatches.push({
            date,
            promoter_name: promoter,
            table_count: tableTotal,
            db_count: dbTotal,
            difference: tableTotal - dbTotal
          });
        }
      }
    }
    
    // Generate report
    let report = '';
    report += '='.repeat(100) + '\n';
    report += '–°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• archive_leads_analytics\n';
    report += '='.repeat(100) + '\n\n';
    
    report += '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê –°–†–ê–í–ù–ï–ù–ò–Ø:\n';
    report += '  ‚Ä¢ "–Ø—Ä–æ—Å–ª–∞–≤" –∏ "–Ø—Ä–æ—Å–ª–∞–≤ –î–µ–º–∫–∏–Ω" - —ç—Ç–æ –†–ê–ó–ù–´–ï –ø—Ä–æ–º–æ—É—Ç–µ—Ä—ã\n';
    report += '  ‚Ä¢ "–ú–∏—Ö–∞–∏–ª" –∏ "–ú–∏—Ö–∞–∏–ª –ì" - —ç—Ç–æ –†–ê–ó–ù–´–ï –ø—Ä–æ–º–æ—É—Ç–µ—Ä—ã\n';
    report += '  ‚Ä¢ –¢–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º—ë–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–Ω–∏–º –ø—Ä–æ–º–æ—É—Ç–µ—Ä–æ–º\n\n';
    
    report += '='.repeat(100) + '\n';
    report += 'üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n';
    report += '='.repeat(100) + '\n\n';
    report += `  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ:                ${tableRecords.length}\n`;
    report += `  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ë–î:                     ${dbRecords.length}\n`;
    report += `  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ:         ${tableMap.size}\n`;
    report += `  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î:              ${dbMap.size}\n\n`;
    report += `  ‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:              ${perfectMatches.length}\n`;
    report += `  ‚ùå –ó–∞–ø–∏—Å–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î:          ${missing.length}\n`;
    report += `  ‚ö†Ô∏è  –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É:        ${mismatches.length}\n\n`;
    
    // Missing records
    if (missing.length > 0) {
      report += '='.repeat(100) + '\n';
      report += '‚ùå –ó–ê–ü–ò–°–ò –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –í –ë–î (–µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)\n';
      report += '='.repeat(100) + '\n\n';
      report += '  –î–∞—Ç–∞       | –ü—Ä–æ–º–æ—É—Ç–µ—Ä              | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n';
      report += '  ' + '-'.repeat(96) + '\n';
      for (const rec of missing) {
        report += `  ${rec.date} | ${rec.promoter_name.padEnd(22)} | ${rec.table_count}\n`;
      }
      report += '\n';
    } else {
      report += '‚úÖ –ù–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î\n\n';
    }
    
    // Mismatches
    if (mismatches.length > 0) {
      report += '='.repeat(100) + '\n';
      report += '‚ö†Ô∏è  –ù–ï–°–û–í–ü–ê–î–ï–ù–ò–Ø –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ö–û–ù–¢–ê–ö–¢–û–í\n';
      report += '='.repeat(100) + '\n\n';
      report += '  –î–∞—Ç–∞       | –ü—Ä–æ–º–æ—É—Ç–µ—Ä              | –¢–∞–±–ª–∏—Ü–∞ | –ë–î  | –†–∞–∑–Ω–∏—Ü–∞\n';
      report += '  ' + '-'.repeat(96) + '\n';
      for (const rec of mismatches) {
        const diff = rec.difference >= 0 ? `+${rec.difference}` : `${rec.difference}`;
        report += `  ${rec.date} | ${rec.promoter_name.padEnd(22)} | ${String(rec.table_count).padStart(7)} | ${String(rec.db_count).padStart(3)} | ${String(diff).padStart(7)}\n`;
      }
      report += '\n';
    } else {
      report += '‚úÖ –ù–µ—Ç –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –≤—Å–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n\n';
    }
    
    // Perfect matches (first 10)
    if (perfectMatches.length > 0) {
      report += '='.repeat(100) + '\n';
      report += '‚úÖ –ü–ï–†–í–´–ï 10 –ü–†–ò–ú–ï–†–û–í –ò–î–ï–ê–õ–¨–ù–´–• –°–û–í–ü–ê–î–ï–ù–ò–ô (–¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏)\n';
      report += '='.repeat(100) + '\n\n';
      report += '  –î–∞—Ç–∞       | –ü—Ä–æ–º–æ—É—Ç–µ—Ä              | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n';
      report += '  ' + '-'.repeat(96) + '\n';
      for (let i = 0; i < Math.min(10, perfectMatches.length); i++) {
        const match = perfectMatches[i];
        report += `  ${match.date} | ${match.promoter_name.padEnd(22)} | ${match.count}\n`;
      }
      report += '\n';
    }
    
    report += '='.repeat(100) + '\n';
    report += '‚úì –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù\n';
    report += '='.repeat(100) + '\n';
    
    // Output report
    console.log(report);
    
    // Save to file
    fs.writeFileSync('comparison_report.txt', report, 'utf8');
    console.log('\nüìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: comparison_report.txt\n');
    
    // Also save detailed JSON
    const detailedData = {
      summary: {
        table_rows: tableRecords.length,
        db_rows: dbRecords.length,
        table_unique: tableMap.size,
        db_unique: dbMap.size,
        perfect_matches: perfectMatches.length,
        missing_in_db: missing.length,
        mismatches: mismatches.length
      },
      missing_records: missing,
      mismatched_records: mismatches,
      perfect_matches: perfectMatches
    };
    
    fs.writeFileSync('comparison_details.json', JSON.stringify(detailedData, null, 2), 'utf8');
    console.log('üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: comparison_details.json\n');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// Run analysis
analyzeComparison();
