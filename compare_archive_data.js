#!/usr/bin/env node
/**
 * Compare Excel-like table data with database records
 */

// Table data from user (first 23 rows as provided)
const TABLE_DATA = `15.03.2025	–í–µ—Ä–æ–Ω–∏–∫–∞	3
18.03.2025	–ê—Ä—Å–µ–Ω	15
22.03.2025	–ù–∞—Ç–∞–ª–∏—è	4
23.03.2025	–ê—Ä—Å–µ–Ω	5
26.03.2025	–í–ª–∞–¥	10
26.03.2025	–ó–ª–∞—Ç–∞	9
28.03.2025	–ú–∞—Ä–∏–Ω–∞	7
28.03.2025	–î–º–∏—Ç—Ä–∏–π	5
29.03.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	19
31.03.2025	–í–ª–∞–¥	17
31.03.2025	–ó–ª–∞—Ç–∞	26
31.03.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	16
31.03.2025	–î–∏–º–∞	2
02.04.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	4
03.04.2025	–ó–ª–∞—Ç–∞	2
03.04.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	5
04.04.2025	–í–ª–∞–¥–∏–º–∏—Ä	2
04.04.2025	–ï–≤–≥–µ–Ω–∏—è	5
05.04.2025	–ñ–∞—Ä–∫—ã–Ω–∞–π	5
07.04.2025	–¢–∏—Ö–æ–Ω	9
07.04.2025	–ê—Ä—Ç—ë–º	1
07.04.2025	–î–º–∏—Ç—Ä–∏–π	1
07.04.2025	–ú–∞—Ä–∏–Ω–∞	6`;

function parseTableData(tableText) {
  const records = [];
  const lines = tableText.trim().split('\n');
  
  for (const line of lines) {
    const parts = line.split('\t');
    if (parts.length === 3) {
      const [dateStr, promoter, count] = parts;
      // Convert date from DD.MM.YYYY to YYYY-MM-DD
      const [day, month, year] = dateStr.split('.');
      const isoDate = `${year}-${month}-${day}`;
      records.push({
        date: isoDate,
        promoter_name: promoter.trim(),
        contact_count: parseInt(count.trim())
      });
    }
  }
  return records;
}

async function getDbRecords() {
  const url = "https://functions.poehali.dev/21cf6c5f-30ec-4a13-bbbe-369db6a0b051";
  const response = await fetch(url);
  const data = await response.json();
  return data.records;
}

function createRecordKey(record) {
  return `${record.date}|${record.promoter_name}`;
}

async function compareData() {
  console.log("=".repeat(80));
  console.log("–°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•");
  console.log("=".repeat(80));
  console.log();
  
  // Parse table data
  const tableRecords = parseTableData(TABLE_DATA);
  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${tableRecords.length}`);
  
  // Get DB records
  const dbRecords = await getDbRecords();
  console.log(`üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î: ${dbRecords.length}`);
  console.log();
  
  // Create lookup dictionaries (using Maps with arrays for duplicates)
  const tableDict = new Map();
  for (const record of tableRecords) {
    const key = createRecordKey(record);
    if (!tableDict.has(key)) {
      tableDict.set(key, []);
    }
    tableDict.get(key).push(record);
  }
  
  const dbDict = new Map();
  for (const record of dbRecords) {
    const key = createRecordKey(record);
    if (!dbDict.has(key)) {
      dbDict.set(key, []);
    }
    dbDict.get(key).push(record);
  }
  
  // Find missing records (in table but not in DB)
  const missingRecords = [];
  for (const [key, records] of tableDict.entries()) {
    if (!dbDict.has(key)) {
      missingRecords.push(...records);
    }
  }
  
  // Find mismatches (same date+promoter but different count)
  const mismatches = [];
  for (const [key, tableRecs] of tableDict.entries()) {
    if (dbDict.has(key)) {
      const dbRecs = dbDict.get(key);
      const tableTotal = tableRecs.reduce((sum, r) => sum + r.contact_count, 0);
      const dbTotal = dbRecs.reduce((sum, r) => sum + r.contact_count, 0);
      
      if (tableTotal !== dbTotal) {
        const [date, promoter] = key.split('|');
        mismatches.push({
          date,
          promoter_name: promoter,
          table_count: tableTotal,
          db_count: dbTotal,
          difference: tableTotal - dbTotal
        });
      }
    }
  }
  
  // Find perfect matches
  const perfectMatches = [];
  for (const [key, tableRecs] of tableDict.entries()) {
    if (dbDict.has(key)) {
      const dbRecs = dbDict.get(key);
      const tableTotal = tableRecs.reduce((sum, r) => sum + r.contact_count, 0);
      const dbTotal = dbRecs.reduce((sum, r) => sum + r.contact_count, 0);
      
      if (tableTotal === dbTotal) {
        const [date, promoter] = key.split('|');
        perfectMatches.push({
          date,
          promoter_name: promoter,
          count: tableTotal
        });
      }
    }
  }
  
  // Print results
  console.log("=".repeat(80));
  console.log("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø");
  console.log("=".repeat(80));
  console.log();
  
  console.log(`üìà –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${tableDict.size}`);
  console.log(`üìà –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${dbDict.size}`);
  console.log(`‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${perfectMatches.length}`);
  console.log(`‚ùå –ó–∞–ø–∏—Å–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î: ${missingRecords.length}`);
  console.log(`‚ö†Ô∏è  –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: ${mismatches.length}`);
  console.log();
  
  // Print missing records
  if (missingRecords.length > 0) {
    console.log("=".repeat(80));
    console.log("–ó–ê–ü–ò–°–ò –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –í –ë–î (–µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–µ—Ç –≤ –±–∞–∑–µ)");
    console.log("=".repeat(80));
    for (const record of missingRecords) {
      console.log(`  ${record.date} | ${record.promoter_name.padEnd(20)} | ${record.contact_count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`);
    }
    console.log();
  }
  
  // Print mismatches
  if (mismatches.length > 0) {
    console.log("=".repeat(80));
    console.log("–ù–ï–°–û–í–ü–ê–î–ï–ù–ò–Ø –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ö–û–ù–¢–ê–ö–¢–û–í");
    console.log("=".repeat(80));
    for (const mismatch of mismatches) {
      const diff = mismatch.difference >= 0 ? `+${mismatch.difference}` : mismatch.difference;
      console.log(`  ${mismatch.date} | ${mismatch.promoter_name.padEnd(20)} | –¢–∞–±–ª–∏—Ü–∞: ${String(mismatch.table_count).padStart(3)} | –ë–î: ${String(mismatch.db_count).padStart(3)} | –†–∞–∑–Ω–∏—Ü–∞: ${diff.padStart(4)}`);
    }
    console.log();
  }
  
  // Print first 10 perfect matches
  if (perfectMatches.length > 0) {
    console.log("=".repeat(80));
    console.log("–ü–ï–†–í–´–ï 10 –ü–†–ò–ú–ï–†–û–í –ò–î–ï–ê–õ–¨–ù–´–• –°–û–í–ü–ê–î–ï–ù–ò–ô");
    console.log("=".repeat(80));
    for (let i = 0; i < Math.min(10, perfectMatches.length); i++) {
      const match = perfectMatches[i];
      console.log(`  ‚úì ${match.date} | ${match.promoter_name.padEnd(20)} | ${match.count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`);
    }
    console.log();
  }
  
  console.log("=".repeat(80));
  console.log("–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù");
  console.log("=".repeat(80));
}

// Run comparison
compareData().catch(console.error);
