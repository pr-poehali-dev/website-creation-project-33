#!/usr/bin/env node

// Full table data from user
const FULL_TABLE_DATA = `15.03.2025	–í–µ—Ä–æ–Ω–∏–∫–∞	3
18.03.2025	–ê—Ä—Å–µ–Ω	15
22.03.2025	–ù–∞—Ç–∞–ª–∏—è	4
23.03.2025	–ê—Ä—Å–µ–Ω	5
26.03.2025	–í–ª–∞–¥	10
26.03.2025	–ó–ª–∞—Ç–∞	9
28.03.2025	–ú–∞—Ä–∏–Ω–∞	7
28.03.2025	–î–º–∏—Ç—Ä–∏–π	5
29.03.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	19
31.03.2025	–í–ª–∞–¥	17
31.03.2025	–ó–ª–∞—Ç–∞	26
31.03.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	16
31.03.2025	–î–∏–º–∞	2
02.04.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	4
03.04.2025	–ó–ª–∞—Ç–∞	2
03.04.2025	–ê–ª–µ–∫—Å–∞–Ω–¥—Ä	5
04.04.2025	–í–ª–∞–¥–∏–º–∏—Ä	2
04.04.2025	–ï–≤–≥–µ–Ω–∏—è	5
05.04.2025	–ñ–∞—Ä–∫—ã–Ω–∞–π	5
07.04.2025	–¢–∏—Ö–æ–Ω	9
07.04.2025	–ê—Ä—Ç—ë–º	1
07.04.2025	–î–º–∏—Ç—Ä–∏–π	1
07.04.2025	–ú–∞—Ä–∏–Ω–∞	6`;

async function main() {
  console.log('\n='.repeat(100));
  console.log('–°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• archive_leads_analytics');
  console.log('='.repeat(100));
  console.log('\n–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // Fetch DB data
  const response = await fetch('https://functions.poehali.dev/21cf6c5f-30ec-4a13-bbbe-369db6a0b051');
  const result = await response.json();
  const dbRecords = result.records;
  
  // Parse table data
  const tableRecords = [];
  for (const line of FULL_TABLE_DATA.trim().split('\n')) {
    const [dateStr, promoter, count] = line.split('\t');
    const [day, month, year] = dateStr.split('.');
    const isoDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
    tableRecords.push({
      date: isoDate,
      promoter_name: promoter.trim(),
      contact_count: parseInt(count.trim())
    });
  }
  
  // Create indexed maps
  const tableMap = new Map();
  const dbMap = new Map();
  
  // Index table records
  for (const rec of tableRecords) {
    const key = `${rec.date}|${rec.promoter_name}`;
    if (!tableMap.has(key)) {
      tableMap.set(key, []);
    }
    tableMap.get(key).push(rec);
  }
  
  // Index DB records
  for (const rec of dbRecords) {
    const key = `${rec.date}|${rec.promoter_name}`;
    if (!dbMap.has(key)) {
      dbMap.set(key, []);
    }
    dbMap.get(key).push(rec);
  }
  
  // Analysis
  const missing = [];
  const mismatches = [];
  const perfectMatches = [];
  
  for (const [key, tableRecs] of tableMap.entries()) {
    const [date, promoter] = key.split('|');
    const tableTotal = tableRecs.reduce((sum, r) => sum + r.contact_count, 0);
    
    if (!dbMap.has(key)) {
      // Missing in DB
      missing.push({ date, promoter_name: promoter, table_count: tableTotal });
    } else {
      // Check if counts match
      const dbRecs = dbMap.get(key);
      const dbTotal = dbRecs.reduce((sum, r) => sum + r.contact_count, 0);
      
      if (tableTotal === dbTotal) {
        perfectMatches.push({ date, promoter_name: promoter, count: tableTotal });
      } else {
        mismatches.push({
          date,
          promoter_name: promoter,
          table_count: tableTotal,
          db_count: dbTotal,
          difference: tableTotal - dbTotal
        });
      }
    }
  }
  
  // Results
  console.log('='.repeat(100));
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  console.log('='.repeat(100));
  console.log(`\n  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ:                ${tableRecords.length}`);
  console.log(`  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ë–î:                     ${dbRecords.length}`);
  console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ:         ${tableMap.size}`);
  console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î:              ${dbMap.size}`);
  console.log(`\n  ‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:              ${perfectMatches.length}`);
  console.log(`  ‚ùå –ó–∞–ø–∏—Å–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î:          ${missing.length}`);
  console.log(`  ‚ö†Ô∏è  –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É:        ${mismatches.length}\n`);
  
  // Missing records
  if (missing.length > 0) {
    console.log('='.repeat(100));
    console.log('‚ùå –ó–ê–ü–ò–°–ò –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –í –ë–î (–µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)');
    console.log('='.repeat(100));
    console.log('\n  –î–∞—Ç–∞       | –ü—Ä–æ–º–æ—É—Ç–µ—Ä              | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
    console.log('  ' + '-'.repeat(96));
    for (const rec of missing) {
      console.log(`  ${rec.date} | ${rec.promoter_name.padEnd(22)} | ${rec.table_count}`);
    }
    console.log();
  }
  
  // Mismatches
  if (mismatches.length > 0) {
    console.log('='.repeat(100));
    console.log('‚ö†Ô∏è  –ù–ï–°–û–í–ü–ê–î–ï–ù–ò–Ø –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ö–û–ù–¢–ê–ö–¢–û–í (–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–∞—Ç–∞ + –ø—Ä–æ–º–æ—É—Ç–µ—Ä, —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)');
    console.log('='.repeat(100));
    console.log('\n  –î–∞—Ç–∞       | –ü—Ä–æ–º–æ—É—Ç–µ—Ä              | –¢–∞–±–ª–∏—Ü–∞ | –ë–î  | –†–∞–∑–Ω–∏—Ü–∞');
    console.log('  ' + '-'.repeat(96));
    for (const rec of mismatches) {
      const diff = rec.difference >= 0 ? `+${rec.difference}` : rec.difference;
      console.log(`  ${rec.date} | ${rec.promoter_name.padEnd(22)} | ${String(rec.table_count).padStart(7)} | ${String(rec.db_count).padStart(3)} | ${String(diff).padStart(7)}`);
    }
    console.log();
  }
  
  // Perfect matches
  if (perfectMatches.length > 0) {
    console.log('='.repeat(100));
    console.log('‚úÖ –ü–ï–†–í–´–ï 10 –ü–†–ò–ú–ï–†–û–í –ò–î–ï–ê–õ–¨–ù–´–• –°–û–í–ü–ê–î–ï–ù–ò–ô (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)');
    console.log('='.repeat(100));
    console.log('\n  –î–∞—Ç–∞       | –ü—Ä–æ–º–æ—É—Ç–µ—Ä              | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
    console.log('  ' + '-'.repeat(96));
    for (let i = 0; i < Math.min(10, perfectMatches.length); i++) {
      const match = perfectMatches[i];
      console.log(`  ${match.date} | ${match.promoter_name.padEnd(22)} | ${match.count}`);
    }
    console.log();
  }
  
  console.log('='.repeat(100));
  console.log('‚úì –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù');
  console.log('='.repeat(100));
  console.log('\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê –ü–†–ò–ú–ï–ù–ï–ù–´:');
  console.log('  ‚Ä¢ "–Ø—Ä–æ—Å–ª–∞–≤" –∏ "–Ø—Ä–æ—Å–ª–∞–≤ –î–µ–º–∫–∏–Ω" —Å—á–∏—Ç–∞—é—Ç—Å—è –†–ê–ó–ù–´–ú–ò –ø—Ä–æ–º–æ—É—Ç–µ—Ä–∞–º–∏');
  console.log('  ‚Ä¢ "–ú–∏—Ö–∞–∏–ª" –∏ "–ú–∏—Ö–∞–∏–ª –ì" —Å—á–∏—Ç–∞—é—Ç—Å—è –†–ê–ó–ù–´–ú–ò –ø—Ä–æ–º–æ—É—Ç–µ—Ä–∞–º–∏');
  console.log('  ‚Ä¢ –¢–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º—ë–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–Ω–∏–º –ø—Ä–æ–º–æ—É—Ç–µ—Ä–æ–º\n');
}

main().catch(console.error);
